{"version":3,"sources":["logo.svg","WritingCanvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WritingCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpenModal","setState","predictionsOpen","onCloseModal","console","log","isMobile","defaultPredictions","state","isDrawing","lastX","lastY","direction","controlDisplay","controlLefb","customColor","color","customStroke","maxWidth","minWidth","width","height","predictions","x","y","draw","bind","assertThisInitialized","clearCanvas","predictDigit","getMinBox","processImageWithModel","coords","model","Model","filepath","document","querySelector","canvas","getContext","ctx","fullscreen","window","innerWidth","innerHeight","strokeStyle","lineJoin","lineCap","lineWidth","Number","e","push","nativeEvent","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","_this2","react_default","a","createElement","className","id","onMouseMove","onMouseDown","onMouseUp","onMouseOut","react_d3_components_lib","data","label","values","tooltipHtml","y0","Math","round","parseFloat","xAxis","yAxis","margin","top","bottom","left","right","onClick","onChange","mbb","dpi","devicePixelRatio","max","min","top_left_adjustment","height_width_adjustment","getImageData","clearRect","preprocess","tensor","row","i","length","mnistContext","imgData","putImageData","ready","then","_this3","predict","input","Float32Array","_ref","output","predictionProbability","predictedDigit","previousPredictions","entries","forEach","_ref2","_ref3","slicedToArray","digit","probability","concat","toFixed","catch","error","tf","resized","resizeBilinear","toFloat","offset","div","coorX","map","coorY","apply","Component","App","helpOpen","index_es","open","onClose","center","href","src_WritingCanvas_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.496dece0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Model } from 'keras-js';\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './WritingCanvas.css'\nimport * as tf from'@tensorflow/tfjs'\nimport * as ReactD3 from 'react-d3-components'\nimport {isMobile} from 'react-device-detect'\n\n\nclass WritingCanvas extends Component{\n\n    constructor(props) {\n        super(props);\n        console.log(\"isMobile\",isMobile) \n        \n        console.log(this.defaultPredictions)\n        this.state = {\n            isDrawing: false,\n            lastX: 0,\n            lastY: 0,\n            direction: true,\n            controlDisplay: \"none\",\n            controlLefb: \"100%\",\n            customColor: false,\n            color: \"#n\",\n            customStroke: false,\n            maxWidth: 100,\n            minWidth: 20,\n            width: this.props.width,\n            height: this.props.height,\n            predictionsOpen:false,\n            predictions:[\n              {x: '0', y: 0},\n              {x: '1', y: 0},\n              {x: '2', y: 0},\n              {x: '3', y: 0},\n              {x: '4', y: 0},\n              {x: '5', y: 0},\n              {x: '6', y: 0},\n              {x: '7', y: 0},\n              {x: '8', y: 0},\n              {x: '9', y: 0}]\n        };\n\n        this.draw = this.draw.bind(this);\n        this.clearCanvas = this.clearCanvas.bind(this);\n        this.predictDigit = this.predictDigit.bind(this); \n        this.getMinBox = this.getMinBox.bind(this);\n        this.processImageWithModel = this.processImageWithModel.bind(this);\n        this.coords = [];\n\n        this.model = new Model({\n          filepath: 'model.bin',\n        });\n    }\n\n\n    onOpenModal = () => {\n      this.setState({ predictionsOpen: true });\n    };\n  \n    onCloseModal = () => {\n      this.setState({ predictionsOpen: false });\n    };\n\n    canvas () {\n        return document.querySelector(\"#draw\");\n    }\n    ctx () {\n        return this.canvas().getContext(\"2d\");\n    }\n    componentDidMount() {\n        const canvas = this.canvas()\n        const ctx = this.ctx()\n        if(this.props.fullscreen === true){\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        }\n        ctx.strokeStyle = \"#000000\";\n        ctx.lineJoin = \"round\";\n        ctx.lineCap = \"round\";\n        ctx.lineWidth = Number(this.state.minWidth) + 1;\n \n    }\n\n\n\n    draw(e) {\n        const ctx = this.ctx();\n\n        if(this.state.isDrawing){\n            ctx.strokeStyle = this.state.color;\n\n            this.coords.push({\n              'x':e.nativeEvent.offsetX,\n              'y':e.nativeEvent.offsetY\n              }); \n\n            ctx.beginPath();\n            ctx.moveTo(this.state.lastX, this.state.lastY);\n            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n            ctx.stroke();\n            this.setState({\n                lastX: e.nativeEvent.offsetX,\n                lastY: e.nativeEvent.offsetY\n            })\n        }\n    }\n\n\n    render () { \n      return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center align-items-center align-self-center\">\n                <div className=\"col-sm-4\">\n                  <div className=\"row\"><h2 className=\"col-sm-12 align-self-start\">DRAW HERE</h2></div>\n                  \n                  <canvas id=\"draw\" className=\"row writing-canvas\" width={this.props.width} height={this.props.height} \n                        onMouseMove={(e)=>{\n                                    this.draw(e); \n                        }}\n                        onMouseDown={(e) => {\n                            this.setState({\n                                isDrawing: true,\n                                lastX: e.nativeEvent.offsetX,\n                                lastY: e.nativeEvent.offsetY\n                            });\n                            if(e.nativeEvent.offsetX >=0 && e.nativeEvent.offsetY >= 0)  \n                            {\t  \n                              this.coords.push({\n                                                'x':e.nativeEvent.offsetX,\n                                                'y':e.nativeEvent.offsetY\n                                                }); \n                            }}\n                        }\n                        onMouseUp={\n                            (e) => {this.setState({isDrawing: false})\n                                if(e.nativeEvent.offsetX >=0 && e.nativeEvent.offsetY >= 0)  \n                                {\t  \n                                  this.coords.push({\n                                                    'x':e.nativeEvent.offsetX,\n                                                    'y':e.nativeEvent.offsetY\n                                                    }); \n                                }\n                                this.predictDigit(e);\n                            }\n                        }\n                        onMouseOut={\n                            (e) => {\n                              this.setState({isDrawing: false});\n                              this.predictDigit(e);\n                            }\n                        }/>\n                  </div>\n                <div className=\"predictions-bar-graph col-sm-4\">\n                  <div className=\"row\"><h2 className=\"col-sm-12 align-self-start\">PREDICTIONS</h2></div>\n                    <ReactD3.BarChart \n                    className=\"row\"\n                      data={[{\n                          label: 'Numbers',\n                          values: this.state.predictions\n                      }]}\n                      tooltipHtml={(x,y,y0)=>{return \"Probability of being \"+x+\" is \"+Math.round(parseFloat(y0) * 10)/10+\"% \"}}\n                      width={this.state.width}\n                      height={this.state.height}\n                      xAxis={{label: \"Digit\"}}\n                      yAxis={{label: \"Probability\"}}\n                      margin={{top: 10, bottom: 50, left: 50, right: 10}}/>\n                </div>\n \n                <div className=\"col-sm-4\">\n                  <div className=\"row\"><h2 className=\"col-sm-12 align-self-start\">WHAT NEURAL NETWORK SAW</h2></div>\n                  <canvas height={28} width={28} id=\"mnist-canvas\" className=\"row\"></canvas>\n                </div>\n\n                \n            </div>\n            <div className=\"row align-items-center clear-button-row\">\n                  <div className=\"col-sm-12 align-self-center\">\n                    <button onClick={this.clearCanvas} className=\"btn clear-button\" onChange={() => {}}>Clear Everything</button>   \n                  </div>\n            </div>\n          </div>\n            \n        )\n    }\n    predictDigit(e){ \n        \n        var mbb = this.getMinBox()\n        //cacluate the dpi of the current window \n        const dpi = window.devicePixelRatio;\n\n \n\n        //extract the image data  \n        var height = (mbb.max.y-mbb.min.y)*dpi;\n        var width = (mbb.max.x-mbb.min.x)*dpi;\n\n        var padding_determinee = (height>width)?height:width;\n        var margin_ratio=3.0/7.0;\n\n        var top_left_adjustment =  margin_ratio * padding_determinee;\n        top_left_adjustment = (top_left_adjustment<100)?100:top_left_adjustment;\n\n        var height_width_adjustment = top_left_adjustment * 2;\n\n\n        console.log(\"height_width_adjustment\",height_width_adjustment,\"top_left_adjustment\",top_left_adjustment);\n\n        height = (mbb.max.y-mbb.min.y) * dpi + height_width_adjustment;\n        width = (mbb.max.x-mbb.min.x)*dpi+ height_width_adjustment;\n\n\n        var left = mbb.min.x*dpi-top_left_adjustment;\n        var top = mbb.min.y*dpi-top_left_adjustment;\n        var margin = 50;\n           \n        if(height>0 && width>0)\n          try{\n            this.processImageWithModel(this.ctx().getImageData(left, top, width, height))\n          }catch(e){}\n          \n    }\n\n    clearCanvas(e){\n        const canvas = this.canvas();\n        const ctx = this.ctx(canvas);\n\n        this.coords = [];\n        ctx.clearRect(0,0,canvas.width, canvas.height);\n\n        var mnistContext = document.querySelector(\"#mnist-canvas\").getContext(\"2d\");\n        mnistContext.clearRect(0,0,28,28) \n \n        this.setState({predictions:[{x: '0', y: 0},\n                                    {x: '1', y: 0},\n                                    {x: '2', y: 0},\n                                    {x: '3', y: 0},\n                                    {x: '4', y: 0},\n                                    {x: '5', y: 0},\n                                    {x: '6', y: 0},\n                                    {x: '7', y: 0},\n                                    {x: '8', y: 0},\n                                    {x: '9', y: 0}]});\n    }\n    \n    async processImageWithModel(data){\n      var tensor = await this.preprocess(data).data();\n      var pixelData = []; \n      \n      var row =[]\n      for(var i=3;i<tensor.length;i+=4){\n        \n        row.push(tensor[i])\n      } \n      var mnistContext = document.querySelector(\"#mnist-canvas\").getContext(\"2d\");\n      var imgData = mnistContext.getImageData(0,0,28,28)\n      \n      console.log(\"imag\", imgData.data.length)\n      for (var i=0;i<imgData.data.length;i+=4)\n        { \n          imgData.data[i+0]=0;\n          imgData.data[i+1]=0;\n          imgData.data[i+2]=0;\n          imgData.data[i+3]=255*tensor[i+3];\n        } \n        mnistContext.putImageData(imgData,0,0,0,0,28,28);\n\n\n        \n  \n      // Perform a prediction and write the results to the console.\n      this.model.ready()\n        .then(() => this.model.predict({\n          input: new Float32Array(row),\n        }))\n        .then(({ output }) => {\n          let predictionProbability = -1;\n          let predictedDigit = null;\n          var previousPredictions = this.state.predictions;\n          \n          console.log(previousPredictions)\n          Object.entries(output).forEach(([digit, probability]) => {\n            if (probability > predictionProbability) {\n              predictionProbability = probability;\n              predictedDigit = digit;\n            }\n            previousPredictions[digit].y = probability*100;\n\n            console.log(\n              `Predicted ${digit} with probability ${probability.toFixed(3)}.`,\n            );\n          });\n          \n          this.setState({predictions:previousPredictions})\n          console.log(\n            `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\\n            Final Prediction is ${predictedDigit}!!!!.\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n          );\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      \n    }\n\n    preprocess(imgData)\n    {\n    return tf.tidy(()=>{\n        //convert the image data to a tensor \n        var tensor = tf.fromPixels(imgData, 4)\n        //resize to 28 x 28 \n        var resized = tf.image.resizeBilinear(tensor, [28, 28]).toFloat()\n        // Normalize the image \n        var offset = tf.scalar(255.0);\n        var normalized = (resized.div(offset));\n        //We add a dimension to get a batch shape \n        return normalized\n        //return resized\n    })\n    }\n\n     \n\n    getMinBox(){\n\t\n      var coorX = this.coords.map(function(p) {return p.x});\n      var coorY = this.coords.map(function(p) {return p.y});\n      //find top left corner \n      var min_coords = {\n       x : Math.min.apply(null, coorX),\n       y : Math.min.apply(null, coorY)\n      }\n      //find right bottom corner \n      var max_coords = {\n       x : Math.max.apply(null, coorX),\n       y : Math.max.apply(null, coorY)\n      }\n      return {\n       min : min_coords,\n       max : max_coords\n      }\n   }\n   \n\n\n}\nexport default WritingCanvas;","import 'bootstrap/dist/css/bootstrap-grid.min.css';\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WritingCanvas from './WritingCanvas.js'\nimport sample from './sample';\nimport Modal from 'react-responsive-modal'\n\nclass App extends Component {\n  \n  state = {\n    helpOpen:true,\n  }\n\n  init(){\n    \n  }\n\n  onOpenModal = () => {\n    this.setState({ helpOpen: true });\n  };\n \n  onCloseModal = () => {\n    this.setState({ helpOpen: false });\n  };\n\n  render() {\n    const {helpOpen} = this.state;\n\n    return (\n      <div className=\"App\">\n        <Modal open={helpOpen} className=\"help-modal\" onClose={this.onCloseModal} center>\n            <h2 className=\"help-app-title\">Hand-Written Digit Recogniser</h2>\n            <p className=\"help-app-intro-body\">Draw any digit 0-9 using your mouse or touch-screen and a nueral network will predict what you drew. For best results, please draw large and vertically straight characters at center of canvas. \n              Feel free to experiment with different shapes and forms for digits.\n            </p>\n            <h3 className=\"help-app-under-the-hood-title\">Under the Hood</h3>\n            <p className=\"help-app-under-the-hood-body\">There is a Convolutional Nueral Network working behind the scene. It was trained on MNIST dataset and code used for training the nueral network can be found here: <a href=\"https://arshsekhon.github.io\">https://arshsekhon.github.io</a></p>\n        </Modal>\n        \n        <WritingCanvas height={350} width={350}/>\n\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}