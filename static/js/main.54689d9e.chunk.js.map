{"version":3,"sources":["assets/logo.svg","components/WritingCanvas.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","WritingCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpenModal","setState","predictionsOpen","onCloseModal","state","isDrawing","lastX","lastY","direction","controlDisplay","controlLefb","customColor","color","customStroke","maxWidth","minWidth","width","height","predictions","x","y","draw","bind","assertThisInitialized","clearCanvas","predictDigit","getMinBox","processImageWithModel","coords","model","Model","filepath","document","querySelector","canvas","getContext","ctx","fullscreen","window","innerWidth","innerHeight","strokeStyle","lineJoin","lineCap","lineWidth","Number","e","push","nativeEvent","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","_this2","react_default","a","createElement","className","id","onMouseMove","onMouseDown","onMouseUp","onMouseOut","react_d3_components_lib","data","label","values","tooltipHtml","y0","Math","round","parseFloat","xAxis","yAxis","margin","top","bottom","left","right","onClick","onChange","mbb","dpi","devicePixelRatio","max","min","top_left_adjustment","height_width_adjustment","console","log","dpr","getImageData","clearRect","preprocess","tensor","row","i","length","mnistContext","imgData","putImageData","ready","then","_this3","predict","input","Float32Array","_ref","output","predictionProbability","previousPredictions","entries","forEach","_ref2","_ref3","slicedToArray","digit","probability","catch","error","tf","resized","resizeBilinear","toFloat","offset","div","coorX","map","coorY","apply","Component","App","helpOpen","index_es","open","onClose","center","href","src_components_WritingCanvas","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.54689d9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Model } from 'keras-js';\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './WritingCanvas.css'\nimport * as tf from'@tensorflow/tfjs'\nimport * as ReactD3 from 'react-d3-components'\nimport {isMobile} from 'react-device-detect'\n\n\nclass WritingCanvas extends Component{\n\n    constructor(props) {\n        super(props); \n        this.state = {\n            isDrawing: false,\n            lastX: 0,\n            lastY: 0,\n            direction: true,\n            controlDisplay: \"none\",\n            controlLefb: \"100%\",\n            customColor: false,\n            color: \"#n\",\n            customStroke: false,\n            maxWidth: 100,\n            minWidth: 25,\n            width: this.props.width,\n            height: this.props.height,\n            predictionsOpen:false,\n            predictions:[\n              {x: '0', y: 0},\n              {x: '1', y: 0},\n              {x: '2', y: 0},\n              {x: '3', y: 0},\n              {x: '4', y: 0},\n              {x: '5', y: 0},\n              {x: '6', y: 0},\n              {x: '7', y: 0},\n              {x: '8', y: 0},\n              {x: '9', y: 0}]\n        };\n\n        this.draw = this.draw.bind(this);\n        this.clearCanvas = this.clearCanvas.bind(this);\n        this.predictDigit = this.predictDigit.bind(this); \n        this.getMinBox = this.getMinBox.bind(this);\n        this.processImageWithModel = this.processImageWithModel.bind(this);\n        this.coords = [];\n\n        this.model = new Model({\n          filepath: 'model.bin',\n        });\n    }\n\n\n    onOpenModal = () => {\n      this.setState({ predictionsOpen: true });\n    };\n  \n    onCloseModal = () => {\n      this.setState({ predictionsOpen: false });\n    };\n\n    canvas () {\n        return document.querySelector(\"#draw\");\n    }\n    ctx () {\n        return this.canvas().getContext(\"2d\");\n    }\n    componentDidMount() {\n        const canvas = this.canvas()\n        const ctx = this.ctx()\n        if(this.props.fullscreen === true){\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        }\n        ctx.strokeStyle = \"#000000\";\n        ctx.lineJoin = \"round\";\n        ctx.lineCap = \"round\";\n        ctx.lineWidth = Number(this.state.minWidth) + 1;\n \n    }\n\n\n\n    draw(e) {\n        const ctx = this.ctx();\n\n        if(this.state.isDrawing){\n            ctx.strokeStyle = this.state.color;\n\n            this.coords.push({\n              'x':e.nativeEvent.offsetX,\n              'y':e.nativeEvent.offsetY\n              }); \n\n            ctx.beginPath();\n            ctx.moveTo(this.state.lastX, this.state.lastY);\n            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n            ctx.stroke();\n            this.setState({\n                lastX: e.nativeEvent.offsetX,\n                lastY: e.nativeEvent.offsetY\n            })\n        }\n    }\n\n\n    render () {  \n      return (\n        <div>\n          <div className=\"digit-recognizer-container\"> \n                <div className=\"digit-recognizer-sub-container draw-here-container\">\n                  <div className=\"row\"><h2 className=\"col-sm-12 align-self-start\">DRAW HERE</h2></div>\n                  \n                  <canvas id=\"draw\" className=\"writing-canvas\" width={this.props.width} height={this.props.height} \n                        onMouseMove={(e)=>{\n                                    this.draw(e); \n                        }}\n                        onMouseDown={(e) => {\n                            this.setState({\n                                isDrawing: true,\n                                lastX: e.nativeEvent.offsetX,\n                                lastY: e.nativeEvent.offsetY\n                            });\n                            if(e.nativeEvent.offsetX >=0 && e.nativeEvent.offsetY >= 0)  \n                            {\t  \n                              this.coords.push({\n                                                'x':e.nativeEvent.offsetX,\n                                                'y':e.nativeEvent.offsetY\n                                                }); \n                            }}\n                        }\n                        onMouseUp={\n                            (e) => {this.setState({isDrawing: false})\n                                if(e.nativeEvent.offsetX >=0 && e.nativeEvent.offsetY >= 0)  \n                                {\t  \n                                  this.coords.push({\n                                                    'x':e.nativeEvent.offsetX,\n                                                    'y':e.nativeEvent.offsetY\n                                                    }); \n                                }\n                                this.predictDigit(e);\n                            }\n                        }\n                        onMouseOut={\n                            (e) => {\n                              this.setState({isDrawing: false});\n                              this.predictDigit(e);\n                            }\n                        }/>\n                  </div>\n                <div className=\"digit-recognizer-sub-container prediction-graph-container\">\n                  <div className=\"row\"><h2 className=\"col-sm-12 align-self-start\">PREDICTIONS</h2></div>\n                    <ReactD3.BarChart \n                    className=\"row\"\n                      data={[{\n                          label: 'Numbers',\n                          values: this.state.predictions\n                      }]}\n                      tooltipHtml={(x,y,y0)=>{return \"Probability of being \"+x+\" is \"+Math.round(parseFloat(y0) * 10)/10+\"% \"}}\n                      width={this.state.width}\n                      height={this.state.height}\n                      xAxis={{label: \"Digit\"}}\n                      yAxis={{label: \"Probability\"}}\n                      margin={{top: 10, bottom: 50, left: 50, right: 10}}/>\n                </div>\n \n                <div className=\"digit-recognizer-sub-container x28Canvas-container\">\n                  <div className=\"row x28Canvas\"><h2 className=\"col-sm-12 align-self-start\">WHAT NEURAL NETWORK SAW</h2></div>\n                  <canvas height={28} width={28} id=\"mnist-canvas\" className=\"row\"></canvas>\n                </div>\n\n                \n            \n            </div>\n            <div className=\"align-items-center clear-button-row\">\n                    <div className=\"col-sm-12 align-self-center\">\n                      <button onClick={this.clearCanvas} className=\"btn clear-button\" onChange={() => {}}>Clear Everything</button>   \n                    </div> \n            </div>\n          </div>\n            \n        )\n    }\n    predictDigit(e){ \n        \n        var mbb = this.getMinBox()\n        //cacluate the dpi of the current window \n        const dpi = window.devicePixelRatio;\n\n \n\n        //extract the image data  \n        var height = (mbb.max.y-mbb.min.y)*dpi;\n        var width = (mbb.max.x-mbb.min.x)*dpi;\n\n        var padding_determinee = (height>width)?height:width;\n        var margin_ratio=3.0/7.0;\n\n        var top_left_adjustment =  margin_ratio * padding_determinee;\n        top_left_adjustment = (top_left_adjustment<100)?100:top_left_adjustment;\n\n        var height_width_adjustment = top_left_adjustment * 2;\n\n\n        console.log(\"height_width_adjustment\",height_width_adjustment,\"top_left_adjustment\",top_left_adjustment);\n\n        height = (mbb.max.y-mbb.min.y) * dpi + height_width_adjustment;\n        width = (mbb.max.x-mbb.min.x)*dpi+ height_width_adjustment;\n\n\n        var left = mbb.min.x*dpi-top_left_adjustment;\n        var top = mbb.min.y*dpi-top_left_adjustment;\n        var margin = 50;\n           \n        \n        var dpr = window.devicePixelRatio || 1;\n        if(height>0 && width>0)\n          try{\n            this.processImageWithModel(this.ctx().getImageData(left/dpr, top/dpr, width/dpr, height/dpr))\n          }catch(e){}\n          \n    }\n\n    clearCanvas(e){\n        const canvas = this.canvas();\n        const ctx = this.ctx(canvas);\n\n        this.coords = [];\n        ctx.clearRect(0,0,canvas.width, canvas.height);\n\n        var mnistContext = document.querySelector(\"#mnist-canvas\").getContext(\"2d\");\n        mnistContext.clearRect(0,0,28,28) \n \n        this.setState({predictions:[{x: '0', y: 0},\n                                    {x: '1', y: 0},\n                                    {x: '2', y: 0},\n                                    {x: '3', y: 0},\n                                    {x: '4', y: 0},\n                                    {x: '5', y: 0},\n                                    {x: '6', y: 0},\n                                    {x: '7', y: 0},\n                                    {x: '8', y: 0},\n                                    {x: '9', y: 0}]});\n    }\n    \n    async processImageWithModel(data){\n      var tensor = await this.preprocess(data).data();\n      var pixelData = []; \n      \n      var row =[]\n      for(var i=3;i<tensor.length;i+=4){\n        \n        row.push(tensor[i])\n      } \n      var mnistContext = document.querySelector(\"#mnist-canvas\").getContext(\"2d\");\n      var imgData = mnistContext.getImageData(0,0,28,28)\n      \n      console.log(\"imag\", imgData.data.length)\n      for (var i=0;i<imgData.data.length;i+=4)\n        { \n          imgData.data[i+0]=0;\n          imgData.data[i+1]=0;\n          imgData.data[i+2]=0;\n          imgData.data[i+3]=255*tensor[i+3];\n        } \n        mnistContext.putImageData(imgData,0,0,0,0,28,28);\n\n\n        \n  \n      // Perform a prediction and write the results to the console.\n      this.model.ready()\n        .then(() => this.model.predict({\n          input: new Float32Array(row),\n        }))\n        .then(({ output }) => {\n          let predictionProbability = -1;\n          let predictedDigit = null;\n          var previousPredictions = this.state.predictions;\n          \n          //console.log(previousPredictions)\n          Object.entries(output).forEach(([digit, probability]) => {\n            if (probability > predictionProbability) {\n              predictionProbability = probability;\n              predictedDigit = digit;\n            }\n            previousPredictions[digit].y = probability*100;\n            /*\n            console.log(\n              `Predicted ${digit} with probability ${probability.toFixed(3)}.`,\n            );*/\n          });\n          \n          this.setState({predictions:previousPredictions})\n          /*\n          console.log(\n            `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\\n            Final Prediction is ${predictedDigit}!!!!.\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n          );*/\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      \n    }\n\n    preprocess(imgData)\n    {\n    return tf.tidy(()=>{\n        //convert the image data to a tensor \n        var tensor = tf.fromPixels(imgData, 4)\n        //resize to 28 x 28 \n        var resized = tf.image.resizeBilinear(tensor, [28, 28]).toFloat()\n        // Normalize the image \n        var offset = tf.scalar(255.0);\n        var normalized = (resized.div(offset));\n        //We add a dimension to get a batch shape \n        return normalized\n        //return resized\n    })\n    }\n\n     \n\n    getMinBox(){\n\t\n      var coorX = this.coords.map(function(p) {return p.x});\n      var coorY = this.coords.map(function(p) {return p.y});\n      //find top left corner \n      var min_coords = {\n       x : Math.min.apply(null, coorX),\n       y : Math.min.apply(null, coorY)\n      }\n      //find right bottom corner \n      var max_coords = {\n       x : Math.max.apply(null, coorX),\n       y : Math.max.apply(null, coorY)\n      }\n      return {\n       min : min_coords,\n       max : max_coords\n      }\n   }\n   \n\n\n}\nexport default WritingCanvas;","import 'bootstrap/dist/css/bootstrap-grid.min.css';\nimport React, { Component } from 'react';\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport WritingCanvas from './components/WritingCanvas.js' \nimport Modal from 'react-responsive-modal'\n\nclass App extends Component {\n  \n  state = {\n    helpOpen:true,\n  }\n\n  init(){\n    \n  }\n\n  onOpenModal = () => {\n    this.setState({ helpOpen: true });\n  };\n \n  onCloseModal = () => {\n    this.setState({ helpOpen: false });\n  };\n\n  render() {\n    const {helpOpen} = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-title\">HANDWRITTEN DIGIT RECOGNIZER</h1>\n        <Modal open={helpOpen} className=\"help-modal\" onClose={this.onCloseModal} center>\n            <h2 className=\"help-app-title\">Hand-Written Digit Recognizer</h2>\n            <p className=\"help-app-intro-body\">Draw any digit 0-9 using your mouse or touch-screen and a nueral network will predict what you drew. <strong> For best results, please draw large and vertically straight characters at center of canvas. </strong>\n               Feel free to experiment with different shapes and forms for digits.</p>\n            \n            <p>\n              The recognizer is really accurate but unfortunately since it runs in browser it only uses 28x28px image of your drawing to make prediction with limited resources. If you feel like recognizer is making inaccurate results check the image recognizer used by looking at canvas labelled \"What Neural Network Saw\".\n            </p>\n            <h3 className=\"help-app-under-the-hood-title\">Under the Hood</h3>\n            <p className=\"help-app-under-the-hood-body\">There is a Convolutional Nueral Network working behind the scene. It was trained on MNIST dataset and code used for training the nueral network can be found here: <a href=\"https://arshsekhon.github.io\">https://arshsekhon.github.io</a></p>\n        </Modal>\n        \n        <WritingCanvas height={350} width={350}/>\n\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}